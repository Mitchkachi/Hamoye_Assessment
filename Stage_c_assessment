{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPDYsPGvkxGRGoZncA9JBVr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mitchkachi/Hamoye_Assessment/blob/main/Stage_c_assessment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KN90TKbrOCum"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "drQj9mGAOKBj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/drive/MyDrive/Data_for_UCI_named.csv\")\n",
        "df"
      ],
      "metadata": {
        "id": "Ov6fXYqXOlUo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"stabf\"].value_counts()"
      ],
      "metadata": {
        "id": "WvNgYgWHPIFA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_copy = df.drop(columns= 'stab' )\n",
        "df_copy"
      ],
      "metadata": {
        "id": "3vdZVOCiPb9X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#encode categorical variable\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "encoder = LabelEncoder()\n",
        "df_copy['stabf'] = encoder.fit_transform(df_copy['stabf'])\n",
        "df_copy"
      ],
      "metadata": {
        "id": "WQS_sNS-uiPO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_copy.drop(columns= 'stabf' )\n",
        "y = df_copy[['stabf']]\n"
      ],
      "metadata": {
        "id": "r06iJCABwHzH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import imblearn \n",
        "# from imblearn.over_sampling import SMOTE\n",
        "# smote = SMOTE(random_state= 1 ) \n",
        "# x_train_balanced, y_balanced = smote.fit_resample (x_train, y_train)\n",
        "# y_balanced.value_counts()"
      ],
      "metadata": {
        "id": "nrzLflgjq6TF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "# standardization of dependent variables\n",
        "scaled_data = scaler.fit_transform(X) \n",
        "print(scaled_data)\n"
      ],
      "metadata": {
        "id": "e1yekv20rbIV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaled_data=pd.DataFrame(scaled_data,columns=X.columns)\n",
        "scaled_data.describe()"
      ],
      "metadata": {
        "id": "VbdTVmEjwxVJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#split the data into training and testing sets \n",
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(scaled_data, y, test_size=0.2, random_state=1)\n",
        "y_train.value_counts()"
      ],
      "metadata": {
        "id": "HNHZyEsMy0J6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import recall_score, accuracy_score, precision_score, f1_score, confusion_matrix"
      ],
      "metadata": {
        "id": "NoNB_eibFU0Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "# creating a RF classifier\n",
        "clf = RandomForestClassifier(n_estimators = 100)\n",
        "\n",
        "# Training the model on the training dataset\n",
        "# fit function is used to train the model using the training sets as parameters\n",
        "clf.fit(x_train, y_train)\n",
        "\n",
        "# performing predictions on the test dataset\n",
        "y_pred = clf.predict(x_test)\n",
        "# metrics are used to find accuracy or error\n",
        "from sklearn import metrics\n",
        "# print()\n",
        "\n",
        "# using metrics module for accuracy calculation\n",
        "print(\"ACCURACY OF THE MODEL: \", metrics.accuracy_score(y_test, y_pred))\n",
        "cnf_mat = confusion_matrix(y_test,y_pred)\n",
        "print(cnf_mat)"
      ],
      "metadata": {
        "id": "QGi4NzLyzHJV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "X1lDI8HWGVCo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "#  Building the model\n",
        "extra_tree_forest = ExtraTreesClassifier(n_estimators = 5,\n",
        "                                        criterion ='entropy', max_features = 2)\n",
        "  \n",
        "# Training the model\n",
        "extra_tree_forest.fit(x_train, y_train)\n",
        "\n",
        "\n",
        "# performing predictions on the test dataset\n",
        "y_pred = extra_tree_forest.predict(x_test)\n",
        "# metrics are used to find accuracy or error\n",
        "from sklearn import metrics\n",
        "\n",
        "# using metrics module for accuracy calculation\n",
        "print(\"ACCURACY OF THE MODEL: \", metrics.accuracy_score(y_test, y_pred))\n",
        "\n",
        "  \n",
        "# Computing the importance of each feature\n",
        "feature_importance = extra_tree_forest.feature_importances_\n",
        "  \n",
        "# Normalizing the individual importances\n",
        "feature_importance_normalized = np.std([tree.feature_importances_ for tree in \n",
        "                                        extra_tree_forest.estimators_],\n",
        "                                        axis = 0)\n",
        "# cnf_mat = confusion_matrix(y_test,y_pred)\n",
        "# print(cnf_mat)"
      ],
      "metadata": {
        "id": "HOpAiiCG0VRb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "Am3ibTB0GnbV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import lightgbm as lgb\n",
        "from lightgbm import LGBMClassifier"
      ],
      "metadata": {
        "id": "X8-kCVKQ7Lgr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LGBMClassifier()\n",
        "model.fit(x_train, y_train)\n",
        " \n",
        "# Predicting the Target variable\n",
        "pred = model.predict(x_test)\n",
        "print(pred)\n",
        "accuracy = model.score(x_test, y_test)\n",
        "print(accuracy)\n",
        "cnf_mat = confusion_matrix(y_test, pred)\n",
        "print(cnf_mat)"
      ],
      "metadata": {
        "id": "yu6LDqAi724N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test, pred))"
      ],
      "metadata": {
        "id": "5IiZq1spGrQm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb\n",
        "xgb_classifier = xgb.XGBClassifier()"
      ],
      "metadata": {
        "id": "J8HAivsT8BM1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgb_classifier.fit(x_train,y_train)"
      ],
      "metadata": {
        "id": "Qp_EkNRj9JeL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = xgb_classifier.predict(x_test)\n",
        "predictions"
      ],
      "metadata": {
        "id": "RwY-JQiU9TJS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Accuracy of Model::\",metrics.accuracy_score(y_test,predictions))"
      ],
      "metadata": {
        "id": "sXEAduEu9W3I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cnf_mat = confusion_matrix(y_test,predictions)\n",
        "print(cnf_mat)"
      ],
      "metadata": {
        "id": "Sv0a-9Fr9lcO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "print(classification_report(y_test, predictions))"
      ],
      "metadata": {
        "id": "R2kK3qIiGw1q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tp = 255\n",
        "fp = 1380\n",
        "fn = 45\n",
        "a = tp/(tp + 0.5*(fp+fn))\n",
        "print(a)"
      ],
      "metadata": {
        "id": "65Pj2bOhONsX"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}